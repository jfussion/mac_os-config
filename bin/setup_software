#! /usr/bin/env bash

# DESCRIPTION
# Sets up and launches (if necessary) installed software.

# Git global config
git config --global user.email "bonillajeb@gmail.com"
git config --global user.name "Joseph Bonilla"
git config --global core.excludesfile ~/.gitignore

# Homebrew
(
  cd /usr/local/Homebrew
  git config --local core.hooksPath /dev/null
)

# Sublime Text
if [ ! -e "/usr/bin/sublime" ]; then
  sudo ln -sv "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl" /usr/local/bin/sublime
fi


# GnuPG setup
mkdir -p $HOME/.gnupg

cat >$HOME/.gnupg/gpg-agent.conf <<EOL
pinentry-program /usr/local/bin/pinentry-mac
enable-ssh-support
default-cache-ttl 7200
max-cache-ttl 86400
# debug-level advanced
# log-file ~/.gnupg/gpg-agent.log
EOL

cat >$HOME/.gnupg/scdaemon.conf <<EOL
# 'allow-admin' is needed in order to run the PIN unblock commands in 'gpg2 --card-edit'
allow-admin
EOL

cat >>$HOME/.zshrc <<EOL

# We only want to run gpg-agent on our local workstation. We accomplish that by trying to
# detect if this shell was spawned from ssh or not. If the SSH_CLIENT env var is set, then
# this is probably a remote login and we don't want to run gpg-agent.

eval ssh-agent
if [ ! -n "$SSH_CLIENT" ]; then
  gpgconf --launch gpg-agent

  if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
      export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
  fi

  GPG_TTY=$(tty)
  export GPG_TTY
  # only necessary if using pinentry in the tty (instead of GUI)
  echo UPDATESTARTUPTTY | gpg-connect-agent > /dev/null 2>&1
fi
EOL

# Global .gitignore
cat >$HOME/.gitignore <<EOL
# OS generated files #
######################
.DS_Store*
ehthumbs.db
Icon

# Vim generated files #
######################
*.un~

# SASS #
##########
.sass-cache

# Folder view configuration files
.DS_Store
Desktop.ini

# Thumbnail cache files
._*
Thumbs.db

# Files that might appear on external disks
.Spotlight-V100
.Trashes

# Compiled Python files
*.pyc

# Compiled C++ files
*.out

# Application specific files
venv
node_modules
bower_components
.sass-cache

.idea
EOL

# Add login items
echo "Disregard Login item UKNOWN waring"
osascript -e 'tell application "System Events" to make login item at end with properties {path:"/Applications/Spectacle.app", hidden:false}'
osascript -e 'tell application "System Events" to make login item at end with properties {path:"/Applications/Docker.app", hidden:false}'
osascript -e 'tell application "System Events" to make login item at end with properties {path:"/Applications/Monosnap.app", hidden:false}'
osascript -e 'tell application "System Events" to make login item at end with properties {path:"/Applications/Caffeine.app", hidden:false}'
osascript -e 'tell application "System Events" to make login item at end with properties {path:"/Applications/aText.app", hidden:false}'
osascript -e 'tell application "System Events" to make login item at end with properties {path:"/Applications/Clocker.app", hidden:false}'
osascript -e 'tell application "System Events" to make login item at end with properties {path:"/Applications/Flux.app", hidden:false}'

# Oh My ZSH
sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
